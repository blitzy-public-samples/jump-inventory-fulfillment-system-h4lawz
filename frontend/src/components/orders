import React, { useEffect, useState } from 'react';
import { useAppSelector, useAppDispatch } from 'frontend/src/store/hooks';
import { fetchOrdersAsync } from 'frontend/src/store/slices/orderSlice';
import { formatCurrency, formatDate } from 'frontend/src/utils/formatters';

// HUMAN ASSISTANCE NEEDED
// The following component needs further refinement for production readiness.
// Implement proper error handling, loading states, and accessibility features.
// Add unit tests to ensure component functionality.

const OrderList: React.FC = () => {
  const dispatch = useAppDispatch();
  const orders = useAppSelector(state => state.orders.list);
  const [sortField, setSortField] = useState<string>('date');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [filter, setFilter] = useState<string>('');
  const [currentPage, setCurrentPage] = useState<number>(1);
  const ordersPerPage = 10;

  useEffect(() => {
    dispatch(fetchOrdersAsync());
  }, [dispatch]);

  const sortedOrders = [...orders].sort((a, b) => {
    if (a[sortField] < b[sortField]) return sortDirection === 'asc' ? -1 : 1;
    if (a[sortField] > b[sortField]) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const filteredOrders = sortedOrders.filter(order =>
    order.id.toLowerCase().includes(filter.toLowerCase()) ||
    order.customerName.toLowerCase().includes(filter.toLowerCase())
  );

  const indexOfLastOrder = currentPage * ordersPerPage;
  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
  const currentOrders = filteredOrders.slice(indexOfFirstOrder, indexOfLastOrder);

  const handleSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilter(e.target.value);
    setCurrentPage(1);
  };

  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div className="order-list">
      <input
        type="text"
        placeholder="Filter orders..."
        value={filter}
        onChange={handleFilterChange}
      />
      <table>
        <thead>
          <tr>
            <th onClick={() => handleSort('id')}>Order ID</th>
            <th onClick={() => handleSort('date')}>Date</th>
            <th onClick={() => handleSort('customerName')}>Customer</th>
            <th onClick={() => handleSort('total')}>Total</th>
            <th onClick={() => handleSort('status')}>Status</th>
          </tr>
        </thead>
        <tbody>
          {currentOrders.map(order => (
            <tr key={order.id}>
              <td>{order.id}</td>
              <td>{formatDate(order.date)}</td>
              <td>{order.customerName}</td>
              <td>{formatCurrency(order.total)}</td>
              <td>{order.status}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="pagination">
        {Array.from({ length: Math.ceil(filteredOrders.length / ordersPerPage) }, (_, i) => (
          <button key={i} onClick={() => handlePageChange(i + 1)}>
            {i + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default OrderList;